" Set local foldmarker
" vim:fdm=marker

" Editor {{{

" Use Vim settings, rather then Vi settings
" This must be first, because it changes other options as a side effect
set nocompatible

" ------------------------------------------------------------------------------
" General Config
" ------------------------------------------------------------------------------
set number                     " Line numbers
set relativenumber             " Relative numbering
set backspace=indent,eol,start " Allow backspace in insert mode
set history=1000               " Store lots of :cmdline history
set showcmd                    " Show incomplete cmds down the bottom
set showmode                   " Show current mode down the bottom
set visualbell                 " No sounds
set autoread                   " Reload files changed outside vim
set hidden                     " Allow buffers to exist in background
set noswapfile                 " No swap file
set nobackup                   " No backup
set nowb                       " No write-backup
set laststatus=2               " Always show statusline
set t_Co=16                    " Set terminal color to 16
set t_md=                      " Turn off bold fonts
set colorcolumn=80             " Highlight column 80
set textwidth=80               " Textwidth at column 80
set formatoptions-=t           " Don't auto-wrap at textwidth
set formatoptions-=o           " Don't auto-insert comment character
set cursorline                 " Highlight current line
set completeopt=menuone        " Complete option (don't show preview)
set wildmenu                   " Tab through commands
set cryptmethod=blowfish2      " Better encryption
set mouse=a                    " Mouse support
set diffopt+=vertical          " Prefer vertical diff
set exrc                       " Allow project-specific vimrc
set secure                     " Force safety in project-specific vimrc
syntax on                      " Turn on syntax
syntax enable                  " Enable syntax
filetype plugin indent on      " Enable filetypes

" ------------------------------------------------------------------------------
" Set cursor
" ------------------------------------------------------------------------------
" Cursor in terminal
" https://vim.fandom.com/wiki/Configuring_the_cursor
" 1 or 0 -> blinking block
" 2 solid block
" 3 -> blinking underscore
" 4 solid underscore
" Recent versions of xterm (282 or above) also support
" 5 -> blinking vertical bar
" 6 -> solid vertical bar
if &term =~ '^xterm'
    " normal mode
    let &t_EI .= "\<Esc>[0 q"
    " insert mode
    let &t_SI .= "\<Esc>[6 q"
endif

" ------------------------------------------------------------------------------
" Default for tabs
" ------------------------------------------------------------------------------
set tabstop=4
set softtabstop=4
set shiftwidth=4

" ------------------------------------------------------------------------------
" Indentation and Linebreaks
" ------------------------------------------------------------------------------
set autoindent
set smartindent
set breakindent
set smarttab
set expandtab
set nowrap
set linebreak
if (!has('win32'))
    set listchars=eol:¬,tab:→-,trail:·,extends:>,precedes:<
end

" ------------------------------------------------------------------------------
" Search Config
" ------------------------------------------------------------------------------
set incsearch
set ignorecase
set smartcase

" ------------------------------------------------------------------------------
"  Set ESC and Leader
" ------------------------------------------------------------------------------
imap jj <Esc>
let mapleader=' '

" ------------------------------------------------------------------------------
" Normal Mappings
" ------------------------------------------------------------------------------
if (!has('win32'))
    nnoremap <C-P> :FZF<CR>
endif

" ------------------------------------------------------------------------------
" Visual Mappings
" ------------------------------------------------------------------------------
vnoremap * "zy/<C-R>z<CR>| " Search for selection using z-register
vnoremap @@ :norm! @@<CR>| " Replay last macro on selection

" ------------------------------------------------------------------------------
" Command Mappings
" ------------------------------------------------------------------------------
cmap w!! w !sudo tee > /dev/null %| " Save as sudo

" ------------------------------------------------------------------------------
" Fold Config
" ------------------------------------------------------------------------------
set foldmethod=indent
" Set foldlevel to 1 > max fold
autocmd BufWinEnter *
    \ let &foldlevel = max(map(range(1, line('$')), 'foldlevel(v:val)'))

" ------------------------------------------------------------------------------
"  Configure Directories
" ------------------------------------------------------------------------------
set runtimepath=$HOME/.vim,$HOME/.vim/after,$VIMRUNTIME

" ------------------------------------------------------------------------------
"  Configure Environment
" ------------------------------------------------------------------------------
if !has('win32')
    let $BASH_ENV = "~/.bash_aliases"
endif

" ------------------------------------------------------------------------------
" Persistent Undo -- Keep undo history across sessions by storing in file
" ------------------------------------------------------------------------------
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
endif

" ------------------------------------------------------------------------------
" GVIM
" ------------------------------------------------------------------------------
if has("gui_running")
    set guifont=ProggyCleanTT:h16
    set lines=45
    set columns=125
    set encoding=utf-8

    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
endif

" }}}

" Functions {{{

" ------------------------------------------------------------------------------
" Get C# Namespace
" ------------------------------------------------------------------------------
function! GetCSharpNamespace(filename, levels)
    let l:directory = fnamemodify(a:filename, ':h') . '/'

    let l:c = 0
    let l:traversed = []

    while l:c <= a:levels
        let l:dir_name = fnamemodify(resolve(fnamemodify(l:directory, ':h')), ':t')
        let l:traversed = l:traversed + [l:dir_name]

        let l:matches = globpath(l:directory, '*.csproj', 0, 1)
        if !empty(l:matches)
            break
        endif

        let l:directory = l:directory . '../'
        let l:c += 1
    endwhile

    return join(reverse(traversed), '.')
endfunction

" ------------------------------------------------------------------------------
" Toggle background
" ------------------------------------------------------------------------------
function! ToggleBackground()
    if &background ==# 'dark'
        set background=light
    else
        set background=dark
    endif
endfunction

" ------------------------------------------------------------------------------
" Toggle wrap
" ------------------------------------------------------------------------------
function! ToggleWrap()
  if &wrap ==# 'nowrap'
    setlocal wrap
  else
    setlocal nowrap
  endif
endfunction

" ------------------------------------------------------------------------------
" Read Command
" ------------------------------------------------------------------------------
function! ReadCommand(msgcmd)
    " Capture message into variable
    redir => message
    silent execute a:msgcmd
    redir END

    " Paste to buffer
    silent put=message
endfunction
command! -nargs=+ -complete=command ReadCommand call ReadCommand(<q-args>)

" ------------------------------------------------------------------------------
" InsertDate Command
" ------------------------------------------------------------------------------
function! InsertDate()
    execute "put =strftime('%Y-%m-%d')"
    execute 'norm! kJ'
endfunction
command! -nargs=0 -complete=command InsertDate call InsertDate()

" ------------------------------------------------------------------------------
" Ag Command
" ------------------------------------------------------------------------------
function! Ag(text, ...)
    let filetype = get(a:, 1, '')
    execute 'AsyncRunWithQf ag --vimgrep ' . filetype . ' "' . a:text . '"'
endfunction
command! -nargs=* -complete=command Ag call Ag(<f-args>)

" ------------------------------------------------------------------------------
" AgG Command
" ------------------------------------------------------------------------------
function! AgG(text, filePattern)
    execute 'AsyncRun! ag --vimgrep -G ' . a:filePattern . ' "' . a:text . '"'
    execute 'botright copen'
endfunction
command! -nargs=* -complete=command AgG call AgG(<f-args>)

" ------------------------------------------------------------------------------
" Scratch Command
" ------------------------------------------------------------------------------
function! Scratch()
    execute 'top 15sp'
    execute 'enew'
    execute 'setlocal buftype=nofile'
    execute 'setlocal bufhidden=hide'
    execute 'setlocal noswapfile'
    execute 'file [Scratch]'
endfunction
command! -nargs=0 -complete=command Scratch call Scratch()

" ------------------------------------------------------------------------------
" DeleteInactiveBufs Command
" source: https://stackoverflow.com/a/7321131/3661319
" ------------------------------------------------------------------------------
function! DeleteInactiveBufs()
    " From tabpagebuflist() help, get a list of all buffers in all tabs
    let tablist = []
    for i in range(tabpagenr('$'))
        call extend(tablist, tabpagebuflist(i + 1))
    endfor

    " Below originally inspired by Hara Krishna Dara and Keith Roberts
    " http://tech.groups.yahoo.com/group/vim/message/56425
    let nWipeouts = 0
    for i in range(1, bufnr('$'))
        if bufexists(i) && !getbufvar(i,"&mod") && index(tablist, i) == -1
        " bufno exists AND isn't modified AND isn't in the list of buffers open
        " in windows and tabs
            silent exec 'bwipeout' i
            let nWipeouts = nWipeouts + 1
        endif
    endfor
    echomsg nWipeouts . ' buffer(s) wiped out'
endfunction
command! -nargs=0 -complete=command DeleteInactiveBufs call DeleteInactiveBufs()

" ------------------------------------------------------------------------------
" AsyncRunWithQf Command
" ------------------------------------------------------------------------------
function! AsyncRunWithQf(cmd)
    execute 'AsyncRun! ' . a:cmd
    execute 'botright copen'
endfunction
command! -nargs=1 -complete=command AsyncRunWithQf call AsyncRunWithQf(<f-args>)

" ------------------------------------------------------------------------------
" CopyFilePath Command
" ------------------------------------------------------------------------------
function! CopyFilePath()
     let @+ = expand('%:p')
endfunction
command! -nargs=0 -complete=command CopyFilePath call CopyFilePath()

" ------------------------------------------------------------------------------
" Qargs Command
" ------------------------------------------------------------------------------
function! QuickfixFilenames()
  " Building a hash ensures we get each buffer only once
  let buffer_numbers = {}
  for quickfix_item in getqflist()
    let buffer_numbers[quickfix_item['bufnr']] = bufname(quickfix_item['bufnr'])
  endfor
  return join(values(buffer_numbers))
endfunction
command! -nargs=0 -bar Qargs execute 'args ' . QuickfixFilenames()

" }}}

" {{{ Misc Config

" ------------------------------------------------------------------------------
" ConEmu Config
" ------------------------------------------------------------------------------
if !empty($CONEMUBUILD)
    " Visual
    set term=xterm
    set encoding=utf-8
    set termencoding=&encoding
    set t_Co=256
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"

    inoremap <Esc>[62~ <C-X><C-E>
    inoremap <Esc>[63~ <C-X><C-Y>
    nnoremap <Esc>[62~ <C-E>
    nnoremap <Esc>[63~ <C-Y>

    " Backspace
    inoremap <Char-0x07F> <BS>
    nnoremap <Char-0x07F> <BS>
    cnoremap <Char-0x07F> <BS>
endif

" }}}

" Plugins {{{

" ------------------------------------------------------------------------------
" Plug Config
" ------------------------------------------------------------------------------
" Automatically download Plug if vim is started without it
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" NOTE: For WSL, you might need to run this to force unix line-endings
" find . -type f -name "*.vim" -print0 | xargs -0 dos2unix --force

call plug#begin('~/.vim/plugged')

" Editor features
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'michaeljsmith/vim-indent-object'
Plug 'sjl/gundo.vim'
Plug 'sk1418/QFGrep'

" File browsing
Plug 'tpope/vim-vinegar'

" Terminal fuzzy-searching
if (!has('win32'))
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
else
    Plug 'ctrlpvim/ctrlp.vim'
endif

" Auto-Complete
Plug 'lifepillar/vim-mucomplete'
Plug 'garbas/vim-snipmate'
    \ | Plug 'marcweber/vim-addon-mw-utils'
    \ | Plug 'tomtom/tlib_vim'

" Formatting
Plug 'godlygeek/tabular'
Plug 'ntpeters/vim-better-whitespace'

" Git
Plug 'tpope/vim-fugitive'

" Testing
Plug 'janko/vim-test'

" Languages {{{

" CSharp
" Plug 'OmniSharp/omnisharp-vim', { 'for': 'cs' }

" Go
Plug 'fatih/vim-go', { 'for': ['go', 'markdown'] }

" HTML
Plug 'alvan/vim-closetag'

" JavaScript
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'prettier/vim-prettier', { 'do': 'npm ci', 'for': ['javascript', 'typescript'] }

" Markdown
Plug 'tpope/vim-markdown', { 'for': ['markdown', 'vimwiki'] }

" Powershell
Plug 'PProvost/vim-ps1', { 'for': ['ps1', 'markdown'] }

" TypeScript
Plug 'leafgarland/typescript-vim', { 'for': ['typescript', 'markdown'] }
Plug 'Quramy/tsuquyomi', { 'for': 'typescript' }

" }}}

" Linting
Plug 'w0rp/ale'

" Tags
Plug 'majutsushi/tagbar', { 'on': 'TagbarOpenAutoClose' }

" Tools
Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }
Plug 'kshenoy/vim-signature'
Plug 'skywind3000/asyncrun.vim'

" Visuals
Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

" }}}

" Plugin Config {{{

" ------------------------------------------------------------------------------
" Airline Config
" ------------------------------------------------------------------------------
let g:airline#extensions#hunks#enabled = 0
let g:airline_symbols_ascii = 1

" ------------------------------------------------------------------------------
" Ale Config
" ------------------------------------------------------------------------------
let g:ale_fix_on_save = 1
let g:ale_linters = {'cs': ['OmniSharp']}
let g:ale_linters_ignore = {'typescript': ['tslint']}
let g:ale_fixers = {
\   'javascript': [
\       'prettier',
\       'eslint',
\   ],
\   'typescript': [
\       'prettier',
\       'eslint',
\   ],
\   'scss': [
\       'prettier',
\   ],
\}
nnoremap ]e :ALENext<CR>
nnoremap [e :ALEPrevious<CR>

" ------------------------------------------------------------------------------
" CloseTag Config
" ------------------------------------------------------------------------------
let g:closetag_filenames = '*.html,*.xml,*.config'

" ------------------------------------------------------------------------------
" Color Scheme
" ------------------------------------------------------------------------------
let g:solarized_bold = 0
let g:solarized_underline = 0
let g:solarized_italic = 0
set background=dark
colorscheme solarized

" ------------------------------------------------------------------------------
" Commentary Config
" ------------------------------------------------------------------------------
autocmd FileType cs setlocal commentstring=//\ %s
autocmd FileType dosbatch setlocal commentstring=::\ %s
autocmd FileType json setlocal commentstring=//\ %s
autocmd FileType sql setlocal commentstring=--\ %s

" ------------------------------------------------------------------------------
" Completion Config
" ------------------------------------------------------------------------------
autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
autocmd Filetype typescript setlocal omnifunc=tsuquyomi#complete

" ------------------------------------------------------------------------------
" CtrlP Config
" ------------------------------------------------------------------------------
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
let g:ctrlp_working_path_mode = 'a'

if executable('ag')
    let g:ctrlp_user_command = 'ag -l --nocolor -g "" "%s"'
endif

if has('win32')
    let g:ctrlp_prompt_mappings = {
        \ 'PrtBS()': ['<Char-0x07F>', '<c-h>']
    \ }
endif

" ------------------------------------------------------------------------------
" FZF Config
" ------------------------------------------------------------------------------
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" ------------------------------------------------------------------------------
" File Extension Config
" ------------------------------------------------------------------------------
autocmd BufRead,BufNewFile,BufEnter *.js set filetype=javascript

" ------------------------------------------------------------------------------
" Goyo Config
" ------------------------------------------------------------------------------
let g:goyo_width=81

" ------------------------------------------------------------------------------
" Netrw Config
" ------------------------------------------------------------------------------
let g:netrw_localrmdir = 'rm -r' " Ability to remove non-empty directories

" ------------------------------------------------------------------------------
" MUComplete Config
" ------------------------------------------------------------------------------
" Make SnipMate & MUComplete play nice
inoremap <plug>MyEnter <cr>
imap <silent> <expr> <plug>MyCR (pumvisible()
    \ ? "\<c-y>\<plug>snipMateTrigger"
    \ : "\<plug>MyEnter")
imap <cr> <plug>MyCR

" Set MUComplete chain priority
let g:mucomplete#chains = { 'default': ['path', 'snip', 'omni', 'keyn'] }

" Allow omni completion after keyword or dot
let g:mucomplete#can_complete = {
\ 'default': {
\    'omni': { t -> strlen(&l:omnifunc) > 0 && t =~# '\%(\k\|\.\)$' }
\    }
\  }


" ------------------------------------------------------------------------------
" OmniSharp Config
" ------------------------------------------------------------------------------
let g:OmniSharp_server_stdio = 1
let g:OmniSharp_highlight_types = 2
let g:OmniSharp_start_server = 0
let g:OmniSharp_highlight_debug = 0

let g:OmniSharp_highlight_groups = {
\ 'csUserIdentifier': [
\   'constant name', 'enum member name', 'field name', 'identifier',
\   'property name', 'static symbol'],
\ 'csUserInterface': ['interface name'],
\ 'csUserMethod': ['extension method name', 'method name'],
\ 'Statement': ['keyword'],
\ 'csUserType': ['class name', 'enum name', 'struct name']
\}

if has('unix')
    let uname = system('uname -a')
    if uname =~ 'Microsoft'
        let g:OmniSharp_server_path = $WINHOME . '/.omnisharp/OmniSharp.exe'
        let g:OmniSharp_translate_cygwin_wsl = 1
    endif
endif

" ------------------------------------------------------------------------------
" Prettier Config
" ------------------------------------------------------------------------------
let g:prettier#autoformat = 0
let g:prettier#exec_cmd_async = 1

" ------------------------------------------------------------------------------
" Signature Config
" ------------------------------------------------------------------------------
let g:SignatureMarkTextHLDynamic = 1
let g:SignatureMarkerTextHLDynamic = 1

" ------------------------------------------------------------------------------
" SnipMate Config
" ------------------------------------------------------------------------------
" Prevents errors after sourcing .vimrc
let g:snipMate = get(g:, 'snipMate', {})
" Don't insert anything when a snippet isn't found
let g:snipMate['no_match_completion_feedkeys_chars'] = ''
let g:snipMate.snippet_version = 1
imap <C-N> <Plug>snipMateNextOrTrigger
smap <C-N> <Plug>snipMateNextOrTrigger

" ------------------------------------------------------------------------------
" Tagbar Config
" ------------------------------------------------------------------------------
let g:tagbar_vertical = 30
let g:tagbar_map_showproto = 'o'
let g:tagbar_type_typescript = {
  \ 'kinds': [
  \ "n:namespace:0:1",
  \ "c:class:0:1",
  \ "e:enum:0:1",
  \ "i:interface:0:1",
  \ "m:member:0:3",
  \ "f:function:0:2",
  \ "v:variable:0:2",
  \ "V:varlambda:0:2"
  \ ],
  \ 'sort' : 0
\ }

" ------------------------------------------------------------------------------
" vim-test Config
" ------------------------------------------------------------------------------
let g:test#strategy = 'asyncrun'
let g:test#csharp#xunit#file_pattern = '\.bogus_file_pattern'

" }}}

" Leader Mappings {{{

" System Clipboard
vnoremap <leader>c "+y|                                  " Copy
nnoremap <leader>v "+p|                                  " Paste (normal)
vnoremap <leader>v "+p|                                  " Paste (visual)

" Buffer
nnoremap <leader><Tab> :b#<CR>|                          " Switch to last buffer
nnoremap <leader>bO :DeleteInactiveBufs<CR>|             " Delete buffers

" Formatting
nnoremap <leader>fw :call ToggleWrap()<CR>|              " Toggle wrap

" Linting (Errors)
nnoremap <leader>eo :lopen<CR>|                          " Open
nnoremap <leader>ec :lclose<CR>|                         " Close
nnoremap <leader>ee :ll<CR>|                             " Current
nnoremap <leader>ej :lnext<CR>|                          " Next
nnoremap <leader>ek :lprevious<CR>|                      " Previous

" Meta
nnoremap <leader>_d :e $MYVIMRC<CR>|                     " Edit .vimrc
nnoremap <leader>_r :source $MYVIMRC<CR>|                " Reload .vimrc
nnoremap <leader>_f :Explore $HOME/.vim/after/ftplugin<CR>
nnoremap <leader>_b :call ToggleBackground()<CR>|        " Toggle background

" Make
nnoremap <leader>mm :Make<CR>|                           " Make

" Undo
nnoremap <leader>uu :GundoToggle<CR>|                    " View undo tree

" Grep
nnoremap <leader>gg :Ag |                                " Grep
vnoremap <leader>gg "zy:Ag <C-R>z |                      " Visual grep
nnoremap <leader>gG :AgG |                               " Grep
vnoremap <leader>gG "zy:AgG <C-R>z |                     " Visual grep

" Quickfix
nnoremap <leader>qo :botright copen<CR>|                 " Open (full width)
nnoremap <leader>qc :cclose<CR>|                         " Close

" Location List
nnoremap <leader>lo :botright lopen<CR>|                 " Open (full width)
nnoremap <leader>lc :lclose<CR>|                         " Close

" Substitute & Global
nnoremap <leader>ss :%s/|                                " Substitute
vnoremap <leader>ss "zy:%s/<C-R>z/|                      " Substitute
nnoremap <leader>sg :%g/|                                " Global
vnoremap <leader>sg "zy:%g/<C-R>z/|                      " Global
nnoremap <leader>sG :%g!/|                               " Inverse Global
vnoremap <leader>sG "zy:%g!/<C-R>z/|                     " Inverse Global

" Tags
nnoremap <leader>tt :Tags<CR>|                           " Fuzzy-search tags
nnoremap <leader>tl :BTags<CR>|                          " Fuzzy-search tags
nnoremap <leader>tb :TagbarOpenAutoClose<CR>|            " Open Tagbar

" }}}

" Work {{{

if isdirectory($HOME . '/work/vim')
    source ~/work/vim/*.vim
endif

" }}}
