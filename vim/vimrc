" Set local foldmarker
" vim:fdm=marker

" Editor {{{

" Use Vim settings, rather then Vi settings
" This must be first, because it changes other options as a side effect
set nocompatible

" ------------------------------------------------------------------------------
" General Config
" ------------------------------------------------------------------------------
set number                     " Line numbers
set relativenumber             " Relative numbering
set backspace=indent,eol,start " Allow backspace in insert mode
set history=1000               " Store lots of :cmdline history
set showcmd                    " Show incomplete cmds down the bottom
set showmode                   " Show current mode down the bottom
set visualbell                 " No sounds
set autoread                   " Reload files changed outside vim
set hidden                     " Allow buffers to exist in background
set noswapfile                 " No swap file
set nobackup                   " No backup
set nowb                       " No write-backup
set laststatus=2               " Always show statusline
set t_Co=16                    " Set terminal color to 16
set colorcolumn=80             " Highlight column 80
set cursorline                 " Highlight current line
set completeopt=menuone        " Complete option (don't show preview)
set wildmenu                   " Tab through commands
set cryptmethod=blowfish2      " Better encryption
set mouse=a                    " Mouse support
syntax on                      " Turn on syntax
syntax enable                  " Enable syntax
autocmd FocusLost * silent! wa " Automatically save file
filetype plugin indent on      " Enable filetypes

" ------------------------------------------------------------------------------
" Default for tabs
" ------------------------------------------------------------------------------
set tabstop=4
set softtabstop=4
set shiftwidth=4

" ------------------------------------------------------------------------------
" Indentation and Linebreaks
" ------------------------------------------------------------------------------
set autoindent
set smartindent
set smarttab
set expandtab
set nowrap
set linebreak

" ------------------------------------------------------------------------------
" Search Config
" ------------------------------------------------------------------------------
set hlsearch
set incsearch
set ignorecase
set smartcase

" ------------------------------------------------------------------------------
"  Set ESC and Leader
" ------------------------------------------------------------------------------
imap jj <Esc>
let mapleader=' '

" ------------------------------------------------------------------------------
" Normal Mappings
" ------------------------------------------------------------------------------
nnoremap <Tab> :bnext<CR>|   " Tab forward through buffers
nnoremap <S-Tab> :bprev<CR>| " Shift-Tab backwards through buffers

" ------------------------------------------------------------------------------
" Visual Mappings
" ------------------------------------------------------------------------------
vnoremap * "zy/<C-R>z<CR>| " Search for selection using z-register
vnoremap @@ :norm! @@<CR>| " Replay last macro on selection

" ------------------------------------------------------------------------------
" Command Mappings
" ------------------------------------------------------------------------------
cmap w!! w !sudo tee > /dev/null %| " Save as sudo

" ------------------------------------------------------------------------------
" Fold Config
" ------------------------------------------------------------------------------
set foldmethod=indent
" Set foldlevel to 1 > max fold
autocmd BufWinEnter *
    \ let &foldlevel = max(map(range(1, line('$')), 'foldlevel(v:val)'))

" ------------------------------------------------------------------------------
"  Configure Directories
" ------------------------------------------------------------------------------
set runtimepath=$HOME/.vim,$VIMRUNTIME

" ------------------------------------------------------------------------------
" Persistent Undo -- Keep undo history across sessions by storing in file
" ------------------------------------------------------------------------------
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
endif

" }}}

" Functions {{{

" ------------------------------------------------------------------------------
" Alias command
" ------------------------------------------------------------------------------
function! SetupCommandAlias(from, to)
  exec 'cnoreabbrev <expr> '.a:from
       \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:from.'")'
       \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction

" ------------------------------------------------------------------------------
" Escape XML
" ------------------------------------------------------------------------------
function! EscapeXml(unescape)
    if a:unescape == 0
        silent! s/&/\&amp;/g
        silent! s/"/\&quot;/g
        silent! s/'/\&apos;/g
        silent! s/'/\&#39;/g
        silent! s/’/\&#8217;/g
        silent! s/>/\&gt;/g
        silent! s/</\&lt;/g
    else
        silent! s/&quot;/"/g
        silent! s/&apos;/'/g
        silent! s/&#39;/'/g
        silent! s/&#8217;/’/g
        silent! s/&gt;/>/g
        silent! s/&lt;/</g
        silent! s/&amp;/\&/g
    endif
endfunction

" ------------------------------------------------------------------------------
" Toggle background
" ------------------------------------------------------------------------------
function! ToggleBackground()
    if &background ==# 'dark'
        set background=light
    else
        set background=dark
    endif
endfunction

" ------------------------------------------------------------------------------
" Toggle wrap
" ------------------------------------------------------------------------------
function! ToggleWrap()
  if &wrap ==# 'nowrap'
    setlocal wrap
  else
    setlocal nowrap
  endif
endfunction

" ------------------------------------------------------------------------------
" Read Command
" ------------------------------------------------------------------------------
function! ReadCommand(msgcmd)
    " Capture message into variable
    redir => message
    silent execute a:msgcmd
    redir END

    " Paste to buffer
    silent put=message
endfunction

command! -nargs=+ -complete=command ReadCommand call ReadCommand(<q-args>)

" }}}

" {{{ Misc Config

" ------------------------------------------------------------------------------
" ConEmu Config
" ------------------------------------------------------------------------------
if !empty($CONEMUBUILD)
    " Visual
    set term=xterm
    set encoding=utf-8
    set termencoding=&encoding
    set t_Co=256
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"

    inoremap <Esc>[62~ <C-X><C-E>
    inoremap <Esc>[63~ <C-X><C-Y>
    nnoremap <Esc>[62~ <C-E>
    nnoremap <Esc>[63~ <C-Y>

    " Backspace
    inoremap <Char-0x07F> <BS>
    nnoremap <Char-0x07F> <BS>
endif

" }}}

" Plugins {{{

" ------------------------------------------------------------------------------
" Plug Config
" ------------------------------------------------------------------------------
" Automatically download Plug if vim is started without it
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Editor features
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'michaeljsmith/vim-indent-object'
Plug 'tommcdo/vim-exchange'
Plug 'sjl/gundo.vim'
Plug 'romainl/vim-cool'

" File browsing
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mhinz/vim-grepper'
Plug 'jeetsukumaran/vim-filebeagle'

" Terminal fuzzy-searching (no Windows support yet)
if (!has('win32'))
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
endif

" Auto-Complete
Plug 'lifepillar/vim-mucomplete'
Plug 'garbas/vim-snipmate'
    \ | Plug 'marcweber/vim-addon-mw-utils'
    \ | Plug 'tomtom/tlib_vim'

" Formatting
Plug 'godlygeek/tabular'
Plug 'ntpeters/vim-better-whitespace'

" Git
Plug 'tpope/vim-fugitive' ", !has('win32') ? {} : { 'on': [] }

" Testing
Plug 'janko-m/vim-test'

" Languages {{{

" Clojure
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'tpope/vim-salve'

" CSharp
Plug 'OrangeT/vim-csharp', { 'for': 'cs' }
Plug 'OmniSharp/omnisharp-vim', { 'for': 'cs' }

" FSharp
Plug 'fsharp/vim-fsharp', { 'for': 'fsharp', 'do': 'make' }

" HTML
Plug 'alvan/vim-closetag'

" JavaScript
Plug 'ternjs/tern_for_vim', { 'for': 'javascript', 'do': 'npm install' }

" Markdown
Plug 'plasticboy/vim-markdown', { 'for': ['markdown', 'vimwiki'] }

" Powershell
Plug 'PProvost/vim-ps1', { 'for': 'ps1' }

" Python
Plug 'davidhalter/jedi-vim', { 'for': 'python' }

" Scala
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }

" TypeScript
Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }
Plug 'Quramy/tsuquyomi', { 'for': 'typescript' }
    \ | Plug 'Shougo/vimproc.vim', { 'do': 'make' }

" }}}

" Linting
Plug 'scrooloose/syntastic'

" Tags
Plug 'majutsushi/tagbar', { 'on': 'TagbarOpenAutoClose' }
Plug 'ludovicchabant/vim-gutentags'

" Testing
Plug 'janko-m/vim-test'

" Tools
Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }
Plug 'justinmk/vim-sneak'
Plug 'kshenoy/vim-signature'
Plug 'tpope/vim-dispatch'
Plug 'skywind3000/asyncrun.vim'
Plug 'vim-scripts/BufOnly.vim'
Plug 'vimwiki/vimwiki'

" Visuals
Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

" }}}

" Plugin Config {{{

" ------------------------------------------------------------------------------
" Airline Config
" ------------------------------------------------------------------------------
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#hunks#enabled = 0
let g:airline_powerline_fonts = 1

" ------------------------------------------------------------------------------
" CloseTag Config
" ------------------------------------------------------------------------------
let g:closetag_filenames = '*.html,*.xml,*.config'

" ------------------------------------------------------------------------------
" Color Scheme
" ------------------------------------------------------------------------------
set background=dark
colorscheme solarized

" ------------------------------------------------------------------------------
" Commentary Config
" ------------------------------------------------------------------------------
autocmd FileType cs setlocal commentstring=//\ %s
autocmd FileType dosbatch setlocal commentstring=::\ %s

" ------------------------------------------------------------------------------
" Completion Config
" ------------------------------------------------------------------------------
autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd Filetype fsharp setlocal omnifunc=fsharpbinding#python#Complete
autocmd Filetype typescript setlocal omnifunc=tsuquyomi#complete

" ------------------------------------------------------------------------------
" CtrlP Config
" ------------------------------------------------------------------------------
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
let g:ctrlp_working_path_mode = 'a'

if executable('ag')
    let g:ctrlp_user_command = 'ag -l --nocolor -g "" "%s"'
endif

if has('win32')
    let g:ctrlp_prompt_mappings = {
        \ 'PrtBS()': ['<Char-0x07F>', '<c-h>']
    \ }
endif

" ------------------------------------------------------------------------------
" FSharp Config
" ------------------------------------------------------------------------------
let g:fsharp_xbuild_path = 'msbuild'
let g:fsharp_test_runner = 'nunit-console'
let g:fsharp_only_check_errors_on_write = 1
let g:fsharp_map_keys = 0
let g:fsharp_completion_helptext = 0
" let g:fsharpbinding_debug=1

" ------------------------------------------------------------------------------
" FileBeagle Config
" ------------------------------------------------------------------------------
let g:filebeagle_suppress_keymaps = 1

" ------------------------------------------------------------------------------
" Goyo Config
" ------------------------------------------------------------------------------
let g:goyo_width=120

" ------------------------------------------------------------------------------
" Grepper Config
" ------------------------------------------------------------------------------
nmap gs  <plug>(GrepperOperator)
xmap gs  <plug>(GrepperOperator)
let g:grepper = {
      \ 'tools': ['ag', 'git', 'grep'],
      \ 'ag': {
      \   'grepprg': 'ag --vimgrep --nocolor --column --ignore tags'
      \ }
      \}

" ------------------------------------------------------------------------------
" Jedi Config
" ------------------------------------------------------------------------------
let g:jedi#auto_vim_configuration = 0
let g:jedi#popup_on_dot = 0
let g:jedi#auto_initialization = 0

" ------------------------------------------------------------------------------
" MUcomplete Config
" ------------------------------------------------------------------------------
let g:mucomplete#user_mappings = { 'snip' : "\<plug>snipMateShow" }
let g:mucomplete#chains = {
  \ 'default' : ['snip', 'path', 'omni', 'keyn', 'dict'],
  \ }
imap <expr> <C-L> (pumvisible() ? "\<c-y>" : "")
\               . "\<plug>snipMateNextOrTrigger"

" ------------------------------------------------------------------------------
" Salve Config
" ------------------------------------------------------------------------------
let g:salve_auto_start_repl = 1

" ------------------------------------------------------------------------------
" Signature Config
" ------------------------------------------------------------------------------
let g:SignatureMarkTextHLDynamic = 1
let g:SignatureMarkerTextHLDynamic = 1

" ------------------------------------------------------------------------------
" Snipmate Config
" ------------------------------------------------------------------------------
let g:snipMate = {}
let g:snipMate['no_match_completion_feedkeys_chars'] = ''

" ------------------------------------------------------------------------------
" Syntastic Config
" ------------------------------------------------------------------------------
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_cs_checkers = ['syntax', 'semantic', 'issues']
let g:syntastic_fsharp_checkers = ['syntax']

" ------------------------------------------------------------------------------
" Test Config
" ------------------------------------------------------------------------------
let test#strategy = 'asnycrun'
let g:test#runner_commands=['Jasmine']

" ------------------------------------------------------------------------------
" UltiSnips Config
" ------------------------------------------------------------------------------
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger = '<C-J>'
let g:UltiSnipsListSnippets = '<C-K>'
let g:UltiSnipsJumpForwardTrigger = '<C-J>'
let g:UltiSnipsJumpBackwardTrigger = '<C-K>'

" ------------------------------------------------------------------------------
" Vimwiki Config
" ------------------------------------------------------------------------------
let g:vimwiki_folding = 'expr'
let g:vimwiki_global_ext = 0
let g:vimwiki_table_mappings = 0
let g:vimwiki_list = [
    \ {
    \ 'path': '~/work/vim/vimwiki',
    \ 'syntax': 'markdown', 'ext': '.md',
    \ 'nested_syntaxes': {
        \ 'cs': 'cs',
        \ 'sql': 'sql',
        \ }
    \ },
    \
    \ {
    \ 'path': '~/Dropbox/vimwiki/',
    \ 'syntax': 'markdown', 'ext': '.md',
    \ }]

" }}}

" Leader Mappings {{{

" ------------------------------------------------------------------------------
" Leader Mappings
" ------------------------------------------------------------------------------

" Buffer
nnoremap <leader><Tab> :e#<CR>|                          " Switch to last buffer
nnoremap <leader>bb :CtrlPBuffer<CR>|                    " Fuzzy-search buffers
nnoremap <leader>bo :BufOnly<CR>|                        " Delete inactive buffers
nnoremap <leader>bD :BufOnly<CR>:bd<CR>|                 " Delete all buffers

" Formatting
nnoremap <leader>fa :setlocal formatoptions+=a<CR>|      " Activate auto-format
nnoremap <leader>fA :setlocal formatoptions-=a<CR>|      " Disable auto-format
nnoremap <leader>fw :call ToggleWrap()<CR>|              " Toggle wrap

" Linting (Errors)
nnoremap <leader>ee :SyntasticCheck<CR>|                 " Error check
nnoremap <leader>et :SyntasticToggleMode<CR>|            " Toggle syntastic
nnoremap <leader>eo :lopen<CR>|                          " Open
nnoremap <leader>ec :lclose<CR>|                         " Close
nnoremap <leader>ej :lnext<CR>|                          " Next
nnoremap <leader>ek :lprevious<CR>|                      " Previous

" Meta
nnoremap <leader>_d :e $MYVIMRC<CR>|                     " Edit .vimrc
nnoremap <leader>_r :source $MYVIMRC<CR>|                " Reload .vimrc
nnoremap <leader>_f :FileBeagle ~/.vim/ftplugin<CR>|     " Open ftplugins
nnoremap <leader>_b :call ToggleBackground()<CR>|        " Toggle background

" Make
nnoremap <leader>mm :Make<CR>|                           " Make

" Undo
nnoremap <leader>uu :GundoToggle<CR>|                    " View undo tree

" Project
nnoremap <leader>pt :FileBeagle<CR>|                     " Open cwd
nnoremap <leader>pf :FileBeagleBufferDir<CR>|            " Open buffer directory
nnoremap <leader>pc :pclose<CR>|                         " Close preview-window
nnoremap <leader>pT :Start! ctags -R<CR>|                " Async ctags generate

" Grep
nnoremap <leader>gg :Grepper<CR>|                        " Grep

" Quickfix
nnoremap <leader>co :botright copen<CR>|                 " Open (full width)
nnoremap <leader>cc :cclose<CR>|                         " Close
nnoremap <leader>cj :cnext<CR>|                          " Next
nnoremap <leader>ck :cprevious<CR>|                      " Previous

" Substitute & Global
nnoremap <leader>ss :%s/|                                " Substitute
nnoremap <leader>sg :%g/|                                " Global
nnoremap <leader>sG :%g!/|                               " Inverse Global

" Spelling
nnoremap <leader>Ss :setlocal spell spelllang=en_us<CR>| " Activate spelling
nnoremap <leader>SS :setlocal nospell<CR>|               " Disable spelling
nnoremap <leader>Sf z=|                                  " Fix word

" Tags
nnoremap <leader>tt :CtrlPTag<CR>|                       " Fuzzy-search tags
nnoremap <leader>ts :tselect<CR>|                        " View list
nnoremap <leader>tj :tnext<CR>|                          " Next
nnoremap <leader>tk :tprev<CR>|                          " Previous
nnoremap <leader>tf :tfirst<CR>|                         " First
nnoremap <leader>tl :tlast<CR>|                          " Last
nnoremap <leader>tb :TagbarOpenAutoClose<CR>|            " Open Tagbar

" Windows
nnoremap <leader>wv :vsplit<CR>|                         " Split vertically
nnoremap <leader>wh :split<CR>|                          " Split horizontally
nnoremap <leader>w= <C-w>=|                              " Reset size
nnoremap <leader>h <C-w>h|                               " Navigate left
nnoremap <leader>j <C-w>j|                               " Navigate down
nnoremap <leader>k <C-w>k|                               " Navigate up
nnoremap <leader>l <C-w>l|                               " Navigate right

" }}}

" Work {{{

if isdirectory($HOME . '/work/vim')
    source ~/work/vim/*.vim
endif

" }}}
