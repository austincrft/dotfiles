" Set local foldmarker
" vim:fdm=marker

" Editor {{{

" Use Vim settings, rather then Vi settings
" This must be first, because it changes other options as a side effect
set nocompatible

" ------------------------------------------------------------------------------
" General Config
" ------------------------------------------------------------------------------
set number                     " Line numbers
set relativenumber             " Relative numbering
set backspace=indent,eol,start " Allow backspace in insert mode
set history=1000               " Store lots of :cmdline history
set showcmd                    " Show incomplete cmds down the bottom
set showmode                   " Show current mode down the bottom
set visualbell                 " No sounds
set autoread                   " Reload files changed outside vim
set hidden                     " Allow buffers to exist in background
set noswapfile                 " No swap file
set nobackup                   " No backup
set nowb                       " No write-backup
set laststatus=2               " Always show statusline
set t_Co=16                    " Set terminal color to 16
set colorcolumn=80             " Highlight column 80
set cursorline                 " Highlight current line
set completeopt=menuone        " Complete option (don't show preview)
syntax on                      " Turn on syntax
syntax enable                  " Enable syntax
autocmd FocusLost * silent! wa " Automatically save file
filetype plugin indent on      " Enable filetypes

" ------------------------------------------------------------------------------
" Indentation and Linebreaks
" ------------------------------------------------------------------------------
set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab
set nowrap
set linebreak

" ------------------------------------------------------------------------------
" Search Config
" ------------------------------------------------------------------------------
set hlsearch
set incsearch
set ignorecase
set smartcase

" ------------------------------------------------------------------------------
"  Set ESC and Leader
" ------------------------------------------------------------------------------
imap jj <Esc>
let mapleader=' '

" ------------------------------------------------------------------------------
" Core Mappings
" ------------------------------------------------------------------------------
nnoremap <S-Tab> :bnext<CR>| " Fast buffer navigation
vnoremap * "zy/<C-R>z<CR>|   " Search for visual selection using z-register

" ------------------------------------------------------------------------------
"  Configure Directories
" ------------------------------------------------------------------------------
set runtimepath=$HOME/.vim,$VIMRUNTIME

" ------------------------------------------------------------------------------
" Persistent Undo -- Keep undo history across sessions by storing in file
" ------------------------------------------------------------------------------
if has('persistent_undo')
    silent !mkdir ~/.vim/backups > /dev/null 2>&1
    set undodir=~/.vim/backups
    set undofile
endif

" }}}

" Functions {{{

" ------------------------------------------------------------------------------
" Alias command
" ------------------------------------------------------------------------------
function! SetupCommandAlias(from, to)
  exec 'cnoreabbrev <expr> '.a:from
        \ .' ((getcmdtype() is# ":" && getcmdline() is# "'.a:from.'")'
        \ .'? ("'.a:to.'") : ("'.a:from.'"))'
endfunction

" ------------------------------------------------------------------------------
" Escape XML
" ------------------------------------------------------------------------------
function! EscapeXml()
    silent! s/&/\&amp;/g
    silent! s/"/\&quot;/g
    silent! s/'/\&apos;/g
    silent! s/>/\&gt;/g
    silent! s/</\&lt;/g
endfunction

" ------------------------------------------------------------------------------
" Get Present Working Directory
" ------------------------------------------------------------------------------
function! GetPwd(path)
    return execute(':pwd')
endfunction

" }}}

" {{{ Misc Config

" ------------------------------------------------------------------------------
" ConEmu Config
" ------------------------------------------------------------------------------
if !empty($CONEMUBUILD)
    " Visual
    set term=xterm
    set encoding=utf-8
    set termencoding=&encoding
    set t_Co=16
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"

    " Mouse
    set mouse=a
    inoremap <Esc>[62~ <C-X><C-E>
    inoremap <Esc>[63~ <C-X><C-Y>
    nnoremap <Esc>[62~ <C-E>
    nnoremap <Esc>[63~ <C-Y>
endif

" ------------------------------------------------------------------------------
" Neovim
" ------------------------------------------------------------------------------
if has('nvim')
    tnoremap <Esc> <C-\><C-n>| " Terminal escape
    call SetupCommandAlias('sh', 'term')
endif

" }}}

" Plugins {{{

" ------------------------------------------------------------------------------
" Plug Config
" ------------------------------------------------------------------------------
" Automatically download Plug if vim is started without it
if empty(glob("~/.vim/autoload/plug.vim"))
    execute '!curl -fLo ~/.vim/autoload/plug.vim https://raw.github.com/'
          \ 'junegunn/vim-plug/master/plug.vim'
endif

call plug#begin('~/.vim/plugged')

" Editor features
Plug 'jiangmiao/auto-pairs'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'michaeljsmith/vim-indent-object'
Plug 'tommcdo/vim-exchange'

" File browsing
Plug 'ctrlpvim/ctrlp.vim'
Plug 'mhinz/vim-grepper'
Plug 'jeetsukumaran/vim-filebeagle'

" Terminal fuzzy-searching (no Windows support yet)
if (!has('win32'))
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
endif

" Formatting
Plug 'godlygeek/tabular'
Plug 'ntpeters/vim-better-whitespace'

" Linting
Plug 'scrooloose/syntastic'

" Git
Plug 'tpope/vim-fugitive', !has('win32') ? {} : { 'on': [] }

" Auto-Complete
Plug 'lifepillar/vim-mucomplete'
Plug 'SirVer/ultisnips'

" Languages {{{

" Clojure
Plug 'tpope/vim-fireplace', { 'for': 'clojure' }
Plug 'tpope/vim-salve'

" CSharp
Plug 'OrangeT/vim-csharp', { 'for': 'cs' }
Plug 'OmniSharp/omnisharp-vim', { 'for': 'cs' }

" FSharp
Plug 'fsharp/vim-fsharp', { 'for': 'fsharp' }

" HTML
Plug 'alvan/vim-closetag', " { 'for': ['html', 'xml'] }

" Powershell
Plug 'PProvost/vim-ps1' , { 'for': 'ps1' }

" Python
Plug 'davidhalter/jedi-vim', { 'for': 'python' }

" Scala
Plug 'derekwyatt/vim-scala', { 'for': 'scala' }

" }}}

" Tags
" Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar', { 'on': 'TagbarOpenAutoClose' }

" Tools
Plug 'amiorin/vim-project'
Plug 'junegunn/goyo.vim', { 'on': 'Goyo' }
Plug 'justinmk/vim-sneak'
Plug 'kshenoy/vim-signature'
Plug 'tpope/vim-dispatch'
Plug 'vim-scripts/BufOnly.vim'
Plug 'xolox/vim-notes' | Plug 'xolox/vim-misc'

" Visuals
Plug 'altercation/vim-colors-solarized'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

call plug#end()

" }}}

" Plugin Config {{{

" ------------------------------------------------------------------------------
" Completion Config
" ------------------------------------------------------------------------------
autocmd FileType cs setlocal omnifunc=OmniSharp#Complete
autocmd FileType python setlocal omnifunc=jedi#completions
autocmd Filetype fsharp setlocal omnifunc=fsharpbinding#python#Complete

" ------------------------------------------------------------------------------
" Airline Config
" ------------------------------------------------------------------------------
let g:airline#extensions#tabline#enabled=1
let g:airline#extensions#hunks#enabled=0
let g:airline_powerline_fonts=1

" ------------------------------------------------------------------------------
" CloseTag Config
" ------------------------------------------------------------------------------
let g:closetag_filenames="*.html,*.htm,*.xml,*.xsl"

" ------------------------------------------------------------------------------
" CtrlP Config
" ------------------------------------------------------------------------------
let g:ctrlp_working_path_mode='a'

" ------------------------------------------------------------------------------
" FSharp Config
" ------------------------------------------------------------------------------
let g:fsharp_xbuild_path='msbuild'
let g:fsharp_test_runner="nunit-console"
let g:fsharp_only_check_errors_on_write=1
let g:fsharp_map_keys=0
let g:fsharp_completion_helptext=0
" let g:fsharpbinding_debug=1

" ------------------------------------------------------------------------------
" FileBeagle Config
" ------------------------------------------------------------------------------
let g:filebeagle_suppress_keymaps=1

" ------------------------------------------------------------------------------
" Goyo Config
" ------------------------------------------------------------------------------
let g:goyo_width=120

" ------------------------------------------------------------------------------
" Grepper Config
" ------------------------------------------------------------------------------
nmap gs  <plug>(GrepperOperator)
xmap gs  <plug>(GrepperOperator)
let g:grepper = {
    \ 'tools': ['ag', 'git', 'grep'],
    \ 'ag': {
    \   'grepprg': 'ag --vimgrep --nocolor --column --ignore tags'
    \ }
    \}

" ------------------------------------------------------------------------------
" Gutentags Config
" ------------------------------------------------------------------------------
" let g:gutentags_project_root_finder='GetPwd'
" let g:gutentags_add_default_project_roots=0

" ------------------------------------------------------------------------------
" Jedi Config
" ------------------------------------------------------------------------------
let g:jedi#auto_vim_configuration=0
let g:jedi#popup_on_dot=0

" ------------------------------------------------------------------------------
" Notes Config
" ------------------------------------------------------------------------------
let g:notes_directories=['~/Dropbox/vim-notes']
let g:notes_suffix='.txt'
let g:notes_unicode_enabled=0

" ------------------------------------------------------------------------------
" OmniSharp Config
" ------------------------------------------------------------------------------
let g:OmniSharp_server_type='roslyn'

" ------------------------------------------------------------------------------
" Salve Config
" ------------------------------------------------------------------------------
let g:salve_auto_start_repl=1

" ------------------------------------------------------------------------------
" Signature Config
" ------------------------------------------------------------------------------
let g:SignatureMarkTextHLDynamic=1
let g:SignatureMarkerTextHLDynamic=1

" ------------------------------------------------------------------------------
" Sneak config
" ------------------------------------------------------------------------------
let g:sneak#streak=1
let g:sneak#use_ic_scs=1

" ------------------------------------------------------------------------------
" Solarized Theme
" ------------------------------------------------------------------------------
set background=dark
colorscheme solarized

" ------------------------------------------------------------------------------
" Syntastic Config
" ------------------------------------------------------------------------------
let g:syntastic_always_populate_loc_list=1
let g:syntastic_cs_checkers=['syntax', 'semantic', 'issues']
let g:syntastic_fsharp_checkers=['syntax']

" ------------------------------------------------------------------------------
" TComment Config
" ------------------------------------------------------------------------------
let g:tcommentMaps=0
nmap gcc :TComment<CR>
vmap gc :TComment<CR>

" ------------------------------------------------------------------------------
" UltiSnips Config
" ------------------------------------------------------------------------------
let g:UltiSnipsSnippetsDir='~/.vim/UltiSnips'
let g:UltiSnipsExpandTrigger='<C-;>'
let g:UltiSnipsListSnippets='<C-:>'
let g:UltiSnipsJumpForwardTrigger='<C-J>'
let g:UltiSnipsJumpBackwardTrigger='<C-K>'

" }}}

" Leader Mappings {{{

" ------------------------------------------------------------------------------
" Leader Mappings
" ------------------------------------------------------------------------------

" Buffer
nnoremap <leader><Tab> :e#<CR>|                          " Switch to last buffer
nnoremap <leader>bb :CtrlPBuffer<CR>|                    " List
nnoremap <leader>bj :bnext<CR>|                          " Next
nnoremap <leader>bk :bprevious<CR>|                      " Previous
nnoremap <leader>bd :bdelete<CR>|                        " Delete
nnoremap <leader>bo :BufOnly<CR>|                        " Delete inactive buffers

" Folding
nnoremap <leader>ff za|                                  " Toggle current fold
nnoremap <leader>fa zM|                                  " Close all folds
nnoremap <leader>fo zR|                                  " Open all folds

" Formatting
nnoremap <leader>Fa :setlocal formatoptions+=a<CR>|      " Activate auto-format
nnoremap <leader>FA :setlocal formatoptions-=a<CR>|      " Disable auto-format
nnoremap <leader>Fu yyp<C-V>$r-|                         " Underline line

" Linting (Errors)
nnoremap <leader>ec :SyntasticCheck<CR>|                 " Error check
nnoremap <leader>et :SyntasticToggleMode<CR>|            " Toggle syntastic
nnoremap <leader>eo :lopen<CR>|                          " Open
nnoremap <leader>ec :lclose<CR>|                         " Close
nnoremap <leader>ej :lnext<CR>|                          " Next
nnoremap <leader>ek :lprevious<CR>|                      " Previous

" Meta
nnoremap <leader>_d :e $MYVIMRC<CR>|                     " Edit .vimrc
nnoremap <leader>_r :source $MYVIMRC<CR>|                " Reload .vimrc
nnoremap <leader>_f :FileBeagle ~/.vim/ftplugin<CR>|     " Open ftplugins

" Make
nnoremap <leader>mm :Make<CR>|                           " Make

" Notes
nnoremap <leader>nn :Note<space>|                        " Open note
nnoremap <leader>nD :DeleteNote<CR>|                     " Delete note
nnoremap <leader>ns :SearchNotes<space>|                 " Delete note

" Project
nnoremap <leader>pt :FileBeagle<CR>|                     " Open cwd
nnoremap <leader>pF :FileBeagleBufferDir<CR>|            " Open buffer directory
nnoremap <leader>pc :pclose<CR>|                         " Close preview-window
nnoremap <leader>pT :Start! ctags -R<CR>|                " Async ctags generate

" Grep
nnoremap <leader>gg :Grepper<CR>|                        " Grep

" Quickfix
nnoremap <leader>co :botright copen<CR>|                 " Open (full width)
nnoremap <leader>cc :cclose<CR>|                         " Close
nnoremap <leader>cj :cnext<CR>|                          " Next
nnoremap <leader>ck :cprevious<CR>|                      " Previous

" Substitute
nnoremap <leader>ss :%s/|                                " Substitute
nnoremap <leader>st :%s/\t/|                             " Substitite tabs

" Spelling
nnoremap <leader>Ss :setlocal spell spelllang=en_us<CR>| " Activate spelling
nnoremap <leader>SS :setlocal nospell<CR>|               " Disable spelling
nnoremap <leader>Sf z=|                                  " Fix word

" Tags
nnoremap <leader>tt :CtrlPTag<CR>|                       " Fuzzy-search tags
nnoremap <leader>ts :tselect<CR>|                        " View list
nnoremap <leader>tj :tnext<CR>|                          " Next
nnoremap <leader>tk :tprev<CR>|                          " Previous
nnoremap <leader>tf :tfirst<CR>|                         " First
nnoremap <leader>tl :tlast<CR>|                          " Last
nnoremap <leader>tb :TagbarOpenAutoClose<CR>|            " Open Tagbar

" Windows
nnoremap <leader>wv :vsplit<CR>|                         " Split vertically
nnoremap <leader>wh :split<CR>|                          " Split horizontally
nnoremap <leader>wq <C-w>q|                              " Quit
nnoremap <leader>h <C-w>h|                               " Navigate left
nnoremap <leader>j <C-w>j|                               " Navigate down
nnoremap <leader>k <C-w>k|                               " Navigate up
nnoremap <leader>l <C-w>l|                               " Navigate right

" }}}

" Projects {{{

" ------------------------------------------------------------------------------
" Project Config
" ------------------------------------------------------------------------------
if isdirectory($HOME . "/.vim/plugged/vim-project")
    set rtp+=~/.vim/bundle/vim-project/
    call project#rc('/src')

    " Get work projects if the file exists
    if filereadable($HOME . "/work/projects.vim")
        source ~/work/projects.vim
    end
end

" }}}
