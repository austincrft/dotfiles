# vim:fdm=marker

#
# C# Snippets for Snipmate
#

# {{{ classes and structs

snippet namespace
	namespace ${1:`GetCSharpNamespace(@%, 10)`}
	{
		${0}
	}
snippet class
	public class ${1:`Filename()`}
	{${0}
	}
snippet struct
	public struct ${1:`Filename()`}
	{${0}
	}
snippet interface
	public interface I${1:`Filename()`}
	{${0}
	}
snippet enum
	public enum ${1:`Filename()`}
	{
		${2:Item}${0}
	}

# }}}

# {{{ properties and fields

snippet prop
	public ${1:int} ${2:MyProperty} { get; set; }${0}
snippet readonly
	private readonly ${1:int} ${2:field};${0}

# }}}

# {{{ loops

snippet for
	for (var ${1:i} = 0; ${1} < ${2:10}; ${1}++)
	{
		${0}
	}
snippet foreach
	foreach (var ${1:item} in ${2:items})
	{
		${0}
	}

# }}}

# {{{ branching

snippet if
	if (${1})
	{
		${2}
	}${0}
snippet elif
	else if (${1})
	{
		${2}
	}${0}
snippet else
	else
	{
		${1}
	}${0}
snippet ifn
	if (${1} == null)
	{
		${2}
	}${0}
snippet ifnn
	if (${1} != null)
	{
		${2}
	}${0}
snippet switch
	switch (${1:statement})
	{
		case ${2:value}:
			${3}
			break;
		default:
			${0}
			break;
	}
snippet case
	case ${1:value}:
		${2}
		break;

# }}}

# {{{ wrappers

snippet using
	using (${1:resource})
	{
		${0}
	}

# }}}

# {{{ exception handling

snippet try
	try
	{
		${0}
	}
	catch (${1:Exception} ${2:e})
	{
		throw;
	}
snippet throw
	throw new ${1}Exception("${2}");

# }}}

# {{{ full methods

snippet meth
	${1:public} ${2:void} ${3:MethodName}(${4})
	{
		${0}
	}

snippet ctor
	public ${1:`Filename()`}(${2})
	{
		${0}
	}

# }}}

# {{{ comments

snippet ///
	/// <summary>
	/// ${1}
	/// </summary>

# }}}

# {{{ testing

snippet init
	[TestInitialize]
	public void Initialize()
	{
		${0}
	}
snippet cleanup
	[TestCleanup]
	public void Cleanup()
	{
		${0}
	}
snippet unittest
	[TestMethod]
	public void ${1:Method}_${2:Scenario}_${3:Result}()
	{
		// Arrange
		${4}
		// Act
		${5}
		// Assert
		${0}
	}
# }}}
