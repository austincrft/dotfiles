# vim:fdm=marker

#
# TypeScript Snippets for Snipmate
#

# {{{ classes and structs

snippet namespace
	namespace ${1:MyNamespace} {
		${0}
	}
snippet class
	export class ${1:`Filename()`}
	{
		${0}
	}
snippet interface
	export interface ${1:Interface} {
		${0}
	}

# }}}

# {{{ properties

snippet proppub
	public ${1:name}: ${2:number};
snippet proppriv
	public ${1:name}: ${2:number};

# }}}

# {{{ loops

snippet forin
	for (let ${1:idx} in ${2:collection}) {
		${0}
	}
snippet forof
	for (let ${1:item} of ${2:collection}) {
		${0}
	}

# }}}

# {{{ branching

snippet if
	if (${1}) {
		${0}
	}
snippet ife
	if (${1}) {
		${2}
	} else {
		${0}
	}
snippet elif
	else if (${1}) {
		${0}
	}

# }}}

# {{{ exception handling

snippet try
	try {
		${0}
	}
	catch (${1:Exception} ${2:e}) {
		throw;
	}

# }}}

# {{{ full methods

snippet ctor
	public constructor(${1})
	{
		${0}
	}

# }}}

# {{{ misc

snippet cl
	console.log(${0});
snippet eslintignore
	// eslint-disable-next-line

# }}}

# {{{ react

snippet importreact
	import React from 'react';
snippet fcomponent
	const ${1:ComponentName}: React.FC = () => {
		return ${0:<div>foo bar</div>};
	};

	export default ${1};
snippet usestate
	const [${1:state}, set${2:State}] = useState<${3:Type}>(${0});
snippet useeffect
	useEffect(() => {
		${0}
	});
snippet rcomment
	{/* $VISUAL */}

# }}}

# {{{ testing

snippet describe
	describe('${1}', () => {
	  ${0}
	});
snippet it
	it('${1}', async () => {
	  ${0}
	});
# }}}
