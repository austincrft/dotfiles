# stylized bash_prompt
# Based on https://github.com/necolas/dotfiles/blob/master/shell/bash_prompt

prompt_git() {
    local s=""
    local branchName=""

    # check if the current directory is in a git repository
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; printf "%s" $?) == 0 ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == "false" ]; then

            # ensure index is up to date
            git update-index --really-refresh  -q &>/dev/null

            # check for uncommitted changes in the index
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s="$s+";
            fi

            # check for unstaged changes
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s="$s!";
            fi

            # check for untracked files
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s="$s?";
            fi

            # check for stashed files
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s="$s$";
            fi

        fi

        # get the short symbolic ref
        # if HEAD isn't a symbolic ref, get the short SHA
        # otherwise, just give up
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
                      git rev-parse --short HEAD 2> /dev/null || \
                      printf "(unknown)")"

        [ -n "$s" ] && s=" [$s]"

        printf "%s" "$1$branchName$s"
    else
        return
    fi
}

set_prompts() {
    local blue=""
    local cyan=""
    local green=""
    local reset=""
    local yellow=""


    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
        tput sgr0 # reset colors

        reset=$(tput sgr0)

        # Solarized colors
        # (https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values)
        blue=$(tput setaf 4)
        cyan=$(tput setaf 6)
        green=$(tput setaf 2)
        yellow=$(tput setaf 3)
    fi

    # build the prompt

    # set the terminal title to the current working directory
    PS1="\[\033]0;\w\007\]"

    PS1+="\[$yellow\]\u" # username
    PS1+="\[$reset\]@"
    PS1+="\[$blue\]\h" # host
    PS1+="\[$reset\]: "
    PS1+="\[$green\]\w" # working directory

    if ! grep -q Microsoft /proc/sys/kernel/osrelease; then
        PS1+="\$(prompt_git \"$reset on $cyan\")" # git repository details
    fi

    PS1+="\n"
    PS1+="\[$reset\]\$ " # $ (and reset color)

    export PS1
}

set_prompts
unset set_prompts
