# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# Platform detection
platform='unknown'
unamestr=`uname`
gnubin='unknown'
if [[ "$unamestr" == 'Linux' ]]; then
    platform='linux'
    gnubin=/usr/bin
elif [[ "$unamestr" == 'Darwin' ]]; then
    platform='darwin'
    gnubin=/usr/local/opt/coreutils/libexec/gnubin
fi

# Don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# Append to the history file, don't overwrite it
shopt -s histappend

# For setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# Check the window size after each command and, if necessary,
# Update the values of LINES and COLUMNS.
shopt -s checkwinsize

# Run autocutsel if available
if [[ -x /us/bin/autocutsel ]]; then
    autocutsel -s PRIMARY &
    autocutsel &
fi

# Make less more friendly for non-text input files, see lesspipe(1)
[ -x $gnubin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# Set PS1 to custom bash prompt if it exists
if [[ -f ~/.bash_prompt ]]; then
    # TERM=rxvt-unicode-256color
    source ~/.bash_prompt
fi
unset color_prompt force_color_prompt

# Enable color support
if [[ -x $gnubin/dircolors ]] && [[ -f ~/.dircolors/dircolors.ansi-dark ]]; then
    eval `$gnubin/dircolors ~/.dircolors/dircolors.ansi-dark`
fi

if [[ -d ~/.dynamic-colors ]]; then
    export PATH="$HOME/.dynamic-colors/bin:$PATH"
    source ~/.dynamic-colors/completions/dynamic-colors.bash
fi

# Alias definitions
if [[ -f ~/.bash_aliases ]]; then
    source ~/.bash_aliases
fi

# Enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
    if [[ -f /usr/share/bash-completion/bash_completion ]]; then
        source /usr/share/bash-completion/bash_completion
    elif [[ -f /etc/bash_completion ]]; then
        source /etc/bash_completion
    fi
fi

# Go Config
export GOPATH=/src/golang

# fzf Config
if [[ -f ~/.fzf.bash ]]; then
    source ~/.fzf.bash
    source ~/.fzfrc
fi

# OS X GNU Tools
if [[ $platform == 'darwin' ]]; then
    PATH="/usr/local/opt/coreutils/libexec/gnubin:$PATH"
    gnuman=/usr/local/opt/coreutils/libexec/gnuman
    findman=/usr/local/opt/findutils/share/man
    MANPATH="$gnuman:$findman:${MANPATH-/usr/share/man}"
fi

if [[ -f /proc/sys/kernel/osrelease ]]; then
    # Windows Subsystem for Linux Settings
    if grep -q Microsoft /proc/sys/kernel/osrelease; then
        # Set WINHOME env variable
        export WINHOME=$(cmd.exe /C "cd /D %USERPROFILE% && bash.exe -c pwd")

        # X Server Copy for WSL
        export DISPLAY=localhost:0.0

        # Connect WSL to docker for Windows
        export DOCKER_HOST=tcp://0.0.0.0:2375
    fi
fi

# Import work-specific commands
if [[ -f ~/work/bashrc ]]; then
    source ~/work/bashrc
fi
